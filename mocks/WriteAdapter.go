// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	messages "github.com/softonic/homing-pigeon/pkg/messages"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// WriteAdapter is an autogenerated mock type for the WriteAdapter type
type WriteAdapter struct {
	mock.Mock
}

// GetTimeout provides a mock function with given fields:
func (_m *WriteAdapter) GetTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// ProcessMessages provides a mock function with given fields: msgs
func (_m *WriteAdapter) ProcessMessages(msgs []messages.Message) []messages.Message {
	ret := _m.Called(msgs)

	if len(ret) == 0 {
		panic("no return value specified for ProcessMessages")
	}

	var r0 []messages.Message
	if rf, ok := ret.Get(0).(func([]messages.Message) []messages.Message); ok {
		r0 = rf(msgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]messages.Message)
		}
	}

	return r0
}

// ShouldProcess provides a mock function with given fields: msgs
func (_m *WriteAdapter) ShouldProcess(msgs []messages.Message) bool {
	ret := _m.Called(msgs)

	if len(ret) == 0 {
		panic("no return value specified for ShouldProcess")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]messages.Message) bool); ok {
		r0 = rf(msgs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewWriteAdapter creates a new instance of WriteAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWriteAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *WriteAdapter {
	mock := &WriteAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
