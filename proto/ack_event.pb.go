// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ack_event.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EmptyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyRequest) Reset()         { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()    {}
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90a7cdd5cc2411b0, []int{0}
}

func (m *EmptyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyRequest.Unmarshal(m, b)
}
func (m *EmptyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyRequest.Marshal(b, m, deterministic)
}
func (m *EmptyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRequest.Merge(m, src)
}
func (m *EmptyRequest) XXX_Size() int {
	return xxx_messageInfo_EmptyRequest.Size(m)
}
func (m *EmptyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRequest proto.InternalMessageInfo

// Message is represented with the body that contains the actual data and a boolean flag.
type Message struct {
	Body                 []byte   `protobuf:"bytes,1,opt,name=Body,proto3" json:"Body,omitempty"`
	Ack                  bool     `protobuf:"varint,2,opt,name=Ack,proto3" json:"Ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_90a7cdd5cc2411b0, []int{1}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Message) GetAck() bool {
	if m != nil {
		return m.Ack
	}
	return false
}

func init() {
	proto.RegisterType((*EmptyRequest)(nil), "proto.EmptyRequest")
	proto.RegisterType((*Message)(nil), "proto.Message")
}

func init() { proto.RegisterFile("ack_event.proto", fileDescriptor_90a7cdd5cc2411b0) }

var fileDescriptor_90a7cdd5cc2411b0 = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4c, 0xce, 0x8e,
	0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a,
	0x7c, 0x5c, 0x3c, 0xae, 0xb9, 0x05, 0x25, 0x95, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x4a,
	0xfa, 0x5c, 0xec, 0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x42, 0x42, 0x5c, 0x2c, 0x4e, 0xf9,
	0x29, 0x95, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x60, 0xb6, 0x90, 0x00, 0x17, 0xb3, 0x63,
	0x72, 0xb6, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x47, 0x10, 0x88, 0x69, 0xe4, 0xc4, 0xc5, 0xe1, 0x98,
	0x9c, 0xed, 0x0a, 0x32, 0x59, 0xc8, 0x8c, 0x8b, 0xdb, 0x3d, 0xb5, 0x04, 0xaa, 0xbf, 0x58, 0x48,
	0x18, 0x62, 0x95, 0x1e, 0xb2, 0x05, 0x52, 0x7c, 0x50, 0x41, 0xa8, 0x2a, 0x25, 0x06, 0x03, 0x46,
	0x27, 0x43, 0x2e, 0xe5, 0xe4, 0xfc, 0x5c, 0xbd, 0xe2, 0xfc, 0xb4, 0x92, 0xfc, 0xbc, 0xcc, 0x64,
	0xbd, 0x8c, 0xfc, 0xdc, 0xcc, 0xbc, 0xf4, 0x82, 0xcc, 0xf4, 0xd4, 0xfc, 0x3c, 0x3d, 0xb8, 0xc3,
	0x9d, 0xe0, 0x16, 0x05, 0x30, 0x26, 0xb1, 0x81, 0x4d, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x9f, 0x81, 0x8f, 0xd2, 0xd8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AckEventClient is the client API for AckEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AckEventClient interface {
	// Handle the given data and return it.
	GetMessages(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (AckEvent_GetMessagesClient, error)
}

type ackEventClient struct {
	cc *grpc.ClientConn
}

func NewAckEventClient(cc *grpc.ClientConn) AckEventClient {
	return &ackEventClient{cc}
}

func (c *ackEventClient) GetMessages(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (AckEvent_GetMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AckEvent_serviceDesc.Streams[0], "/proto.AckEvent/GetMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &ackEventGetMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AckEvent_GetMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type ackEventGetMessagesClient struct {
	grpc.ClientStream
}

func (x *ackEventGetMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AckEventServer is the server API for AckEvent service.
type AckEventServer interface {
	// Handle the given data and return it.
	GetMessages(*EmptyRequest, AckEvent_GetMessagesServer) error
}

// UnimplementedAckEventServer can be embedded to have forward compatible implementations.
type UnimplementedAckEventServer struct {
}

func (*UnimplementedAckEventServer) GetMessages(req *EmptyRequest, srv AckEvent_GetMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}

func RegisterAckEventServer(s *grpc.Server, srv AckEventServer) {
	s.RegisterService(&_AckEvent_serviceDesc, srv)
}

func _AckEvent_GetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AckEventServer).GetMessages(m, &ackEventGetMessagesServer{stream})
}

type AckEvent_GetMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type ackEventGetMessagesServer struct {
	grpc.ServerStream
}

func (x *ackEventGetMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _AckEvent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AckEvent",
	HandlerType: (*AckEventServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessages",
			Handler:       _AckEvent_GetMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ack_event.proto",
}
